#lang pl 02

#|
;==== Q.1(A): ====
<D>::=<num>
<CH>::=<Symbol>

<SE>::=  <D>                            1
        "<D>"                           2
       | <String>                       3
       | <CH>                           4
       | <𝜆>                            5
       | {string-length <SE>}           6
       | {string <SE> }                 7 
       | {string-insert <SE> <CH> <D> } 8
       | {string-append <SE> <SE> }     9
       | {number->string <D>}           10
       | #\<D>                          11
|#

;==== check for your examples: ====
;        ==== Q.1(B): ====
#|

"12344"
 <SE> --2--> "<D>" --> "12344"

12
<SE> --1--> <D> --> 12

( string #\1 #\2 #\4 )
 <SE> --9--> {string-append <SE> <SE> } --9-->  {string-append {string-append <SE> <SE> } <SE> } --3,3,3--> {string-append {string <SE> } <SE> }
--->  {string-append <SE> <SE> } ---> { string <SE> } ---> { string 124 } --> "124"
( string-append ( string #\1 #\2 #\4 ) "12" )
 <SE> --9,2--> {string-append  {string-append <SE> <SE> } <SE> } --9-->  {string-append  {string-append <SE> {string-append <SE> <SE> } } <SE> }
--3,3,3,3-->  {string-append  {string-append <String> {string-append <String> <String> } } <String> } --> 12412

( string-insert "1357" #\4 66 )
<SE> --8--> {string-insert <SE> <CH> <D>} -3-> {string-insert <String> <CH> <D>} --> 135766

( number->string 156879 )
<SE> --10--> {number->string "<D>"} --1--> "156879"

( number->string ( string-length "0033344" ) )
<SE> --10--> { number->string <SE> } --6--> { number->string { string-length "0033344" } } -->  { number->string <D> } -10->  0033344

#\3
<SE> --11--> #\<D> --> #\3
|#

; ==== Q.2: ====

#|
square function which takes a number as input,
 and produces a number which is the square of the input number. 
|# 
(: square : Number -> Number)
(define (square myNum)
   (* myNum  myNum))

(test (square 5) => 25)
(test (square 0) => 0)
(test (square 1) => 1)
(test (square 10) => 100)

#|
sum-of-squares function which takes a list of numbers as input,
 and produces a number which is the sum of the squares of all of the numbers in the list. 
|# 
(: sum-of-squares : (Listof Number) -> Number)
(define (sum-of-squares mylist)
  (foldl + 0 (map square mylist)))
  

(test (sum-of-squares '(1 2 3)) => 14)
(test (sum-of-squares '(0 2 5)) => 29)
(test (sum-of-squares '(-1 -2 -3)) => 14)
(test (sum-of-squares '(7 10 1)) => 150)
(test (sum-of-squares '(5)) => 25)
(test (sum-of-squares '(1 1 1 1 1 1 1 1 1 1 1)) => 11 )

;==== Q.3(A): ====
#|
function createPolynomial that takes as arguments a list of 𝑘 numbers 𝑎0, … , 𝑎𝑘−1
and returns as output a function.
The returned function takes a number 𝑥0 and return the
value of the polynomial 𝑎0 ⋅ 𝑥0 + ⋯ + 𝑎𝑘−1 ⋅ 𝑥𝑛−1 at 𝑥0
|# 

(: createPolynomial : (Listof Number) -> (Number -> Number)) 
(define (createPolynomial mylist) 
  (: poly : (Listof Number) Number Integer Number -> 
Number) 
  (define (poly argsL x power accum) 
     (if (null? argsL)
         accum
         (poly (rest argsL) x (+ power 1) (+ accum (* (first argsL) (expt x power))))        
         ) )
 (: polyX : Number -> Number)
  (define (polyX x)
    (poly mylist x 0 0))
polyX)


(define p2345 (createPolynomial '(2 3 4 5)))
(test (p2345 0) =>
 (+ (* 2 (expt 0 0)) (* 3 (expt 0 1)) (* 4 (expt 0 2)) (* 5
(expt 0 3))))
(test (p2345 4) =>
 (+ (* 2 (expt 4 0)) (* 3 (expt 4 1)) (* 4 (expt 4 2)) (* 5
(expt 4 3))))
(test (p2345 11) => (+ (* 2 (expt 11 0)) (* 3 (expt 11 1)) (* 4
(expt 11 2)) (* 5 (expt 11 3))))
(define p536 (createPolynomial '(5 3 6)))
(test (p536 11) => (+ (* 5 (expt 11 0)) (* 3 (expt 11 1)) (* 6
(expt 11 2))))
(define p_0 (createPolynomial '()))
(test (p_0 4) => 0)
(define p-1-3-4-5 (createPolynomial '(-1 -3 -4 -5)))
(test (p-1-3-4-5 0) =>
 (+ (* -1 (expt 0 0)) (* -3 (expt 0 1)) (* -4 (expt 0 2)) (* -5
(expt 0 3))))
(test (p-1-3-4-5 7) =>
 (+ (* -1 (expt 7 0)) (* -3 (expt 7 1)) (* -4 (expt 7 2)) (* -5
(expt 7 3))))
(define p0330 (createPolynomial '(0 3 3 0)))
(test (p0330 1) =>
 (+ (* 0 (expt 1 0)) (* 3 (expt 1 1)) (* 3 (expt 1 2)) (* 0
(expt 1 3))))
(test (p0330 7) =>
 (+ (* 0 (expt 7 0)) (* 3 (expt 7 1)) (* 3 (expt 7 2)) (* 0
(expt 7 3))))

;==== Q.3(B): ====

